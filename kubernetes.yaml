apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels: 
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: "/etc/nginx/nginx.conf"
          name: nginx
      volumes:
      - name: nginx
        configMap:   
          name: nginx
         
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  selector:
    app: nginx
  ports: 
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
data:
  default-conf: |
    events{}
    http {
    server {
        proxy_read_timeout  90;
        proxy_set_header X-Forwarded-Host $host:$server_port;
    	  proxy_set_header X-Forwarded-Server $host;
    	  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    	  proxy_set_header X-Forwarded-Proto $scheme;
    	  proxy_set_header X-Real-IP $remote_addr;
    
        listen 80;
        location / {
            proxy_pass http://portal-core:5000;
        }
        
        location /auth {
            proxy_pass http://keycloak:8080;
        }


        location /feedback-api {
            proxy_pass http://feedback-api:8084;
        }
        location /self-reflection-api {
            proxy_pass http://self-reflection-api:8082;
        }
        location /portal-application-api {
            proxy_pass http://portal-application-api:8081;
        }
        location /form-api {
            proxy_pass http://form-api:8085;
        }	
        location /cohort-api {
            proxy_pass http://cohort-api:8086;
        }
    }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal-core
  labels: 
    app: portal-core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: portal-core
  template:
    metadata:
      labels:
        app: portal-core
    spec:
      containers:
      - name: portal-core
        image: deployment:5000/portal-core:build-{{BUILD}}
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: portal-core
spec:
  selector:
    app: portal-core
  ports: 
  - protocol: TCP
    port: 5000
    targetPort: 80
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cv-api
  labels: 
    app: cv-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cv-api
  template:
    metadata:
      labels:
        app: cv-api
    spec:
      containers:
      - name: cv-api
        image: deployment:5000/cv-api:build-{{BUILD}}
        ports:
        - containerPort: 8087

---
apiVersion: v1
kind: Service
metadata:
  name: cv-api
spec:
  selector:
    app: cv-api
  ports: 
  - protocol: TCP
    port: 8087
    targetPort: 8087
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: feedback-api
  labels: 
    app: feedback-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: feedback-api
  template:
    metadata:
      labels:
        app: feedback-api
    spec:
      containers:
      - name: feedback-api
        image: deployment:5000/feedback-api:build-{{BUILD}}
        ports:
        - containerPort: 8084

---
apiVersion: v1
kind: Service
metadata:
  name: feedback-api
spec:
  selector:
    app: feedback-api
  ports: 
  - protocol: TCP
    port: 8084
    targetPort: 8084
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: form-api
  labels: 
    app: form-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: form-api
  template:
    metadata:
      labels:
        app: form-api
    spec:
      containers:
      - name: form-api
        image: deployment:5000/form-api:build-{{BUILD}}
        ports:
        - containerPort: 8085

---
apiVersion: v1
kind: Service
metadata:
  name: form-api
spec:
  selector:
    app: form-api
  ports: 
  - protocol: TCP
    port: 8085
    targetPort: 8085
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal-application-api
  labels: 
    app: portal-application-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: portal-application-api
  template:
    metadata:
      labels:
        app: portal-application-api
    spec:
      containers:
      - name: portal-application-api
        image: deployment:5000/portal-application-api:build-{{BUILD}}
        ports:
        - containerPort: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: portal-application-api
spec:
  selector:
    app: portal-application-api
  ports: 
  - protocol: TCP
    port: 8081
    targetPort: 8081
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: self-reflection-api
  labels: 
    app: self-reflection-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: self-reflection-api
  template:
    metadata:
      labels:
        app: self-reflection-api
    spec:
      containers:
      - name: self-reflection-api
        image: deployment:5000/self-reflection-api:build-{{BUILD}}
        ports:
        - containerPort: 8082 

---
apiVersion: v1
kind: Service
metadata:
  name: self-reflection-api
spec:
  selector:
    app: self-reflection-api
  ports: 
  - protocol: TCP
    port: 8082
    targetPort: 8082
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cohort-api
  labels: 
    app: cohort-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cohort-api
  template:
    metadata:
      labels:
        app: cohort-api
    spec:
      containers:
      - name: cohort-api
        image: deployment:5000/cohort-api:build-{{BUILD}}
        ports:
        - containerPort: 8086

---
apiVersion: v1
kind: Service
metadata:
  name: cohort-api
spec:
  selector:
    app: cohort-api
  ports: 
  - protocol: TCP
    port: 8086
    targetPort: 8086
  type: ClusterIP
---

#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
  #name: postgres
#spec:
  #accessModes:
    #- ReadWriteOnce
  #resources:
    #requests:
      #storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels: 
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres
        ports:
        - containerPort: 5432
        #volumeMounts:
        #- mountPath: "var/lib/postgresql/data"
          #name: postgres
      #volumes:
      #- name: postgres
        #persistentVolumeClaim:   
          #claimName: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports: 
  - protocol: TCP
    port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  labels: 
    app: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo
        ports:
        - containerPort: 27017
        volumeMounts:
        - mountPath: "/data/db"
          name: mongo
      volumes:
      - name: mongo
        persistentVolumeClaim:   
          claimName: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  selector:
    app: mongo
  ports: 
  - protocol: TCP
    port: 27017
    targetPort: 27017
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  labels: 
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: jboss/keycloak:6.0.1
        ports:
        - containerPort: 8080
        env:
        - name: KEYCLOAK_USER
          value: "admin"
        - name: KEYCLOAK_PASSWORD
          value: "admin"
        - name: DB_DATABASE
          value: "keycloak"
        - name: DB_USER
          value: "postgres"
        - name: DB_PASSWORD
          value: "postgres"
        - name: PROXY_ADDRESS_FORWARDING
          value: "true"
        command: ["-Dkeycloak.migration.action=import", "-Dkeycloak.migration.provider=dir", "-Dkeycloak.migration.dir=/opt/jboss/exported_realms", "-Dkeycloak.migration.strategy=OVERWRITE_EXISTING"]
        volumeMounts:
        - mountPath: "/opt/jboss/exported_realms"
          name: keycloak
      volumes:
      - name: keycloak
        persistentVolumeClaim:   
          claimName: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
spec:
  selector:
    app: keycloak
  ports: 
  - protocol: TCP
    port: 8080
    targetPort: 8080
  type: ClusterIP
  
